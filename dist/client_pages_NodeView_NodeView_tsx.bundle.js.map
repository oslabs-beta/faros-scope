{"version":3,"file":"client_pages_NodeView_NodeView_tsx.bundle.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;;AAE+B;AACiD;AACrB;;AAE3D;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,4BAA4B,2CAAc;AAC1C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH,EAAE,oEAAiB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA,uCAAuC,kCAAK;AAC5C;AACA,6BAA6B,8CAAiB;AAC9C,4BAA4B,0CAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,GAAG;AACH,mCAAmC,0CAAa;AAChD;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACe,+CAA+C;AAC9D,gBAAgB,uDAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,EAAE,uDAAa;AACnB;AACA;AACA;AACA,GAAG;AACH,MAAM,IAAqC;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM,IAAqC;AAC3C;AACA,IAAI,gDAAmB;AACvB;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AC5HuC;AACvC;AACA;AACA;AAC6D;AACC;AAG9D;AACA,IAAMM,SAAS,gBAAGN,2CAAI,CAAC;EAAA,OAAM,6TAA8C;AAAA,EAAC;AAC5E,IAAMO,kBAAkB,gBAAGP,2CAAI,CAC7B;EAAA,OAAM,mNAAgE;AAAA,CACxE,CAAC;AAEwD;AAO/B;AAAA;AAAA;AAE1B,IAAMiB,OAAqB,GAAG,CAC5B;EACEC,KAAK,EAAE,UAAU;EACjBC,UAAU,EAAE,2BAA2B;EACvCC,WAAW,EAAE,MAAM;EACnBC,IAAI,EAAE,CAAC;EACPC,KAAK,EAAE;AACT,CAAC,EACD;EACEJ,KA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","sources":["webpack://faros-scope/./node_modules/@mui/material/useMediaQuery/useMediaQuery.js","webpack://faros-scope/./client/pages/NodeView/NodeView.tsx"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { getThemeProps, useThemeWithoutDefault as useTheme } from '@mui/system';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\n\n/**\n * @deprecated Not used internally. Use `MediaQueryListEvent` from lib.dom.d.ts instead.\n */\n\n/**\n * @deprecated Not used internally. Use `MediaQueryList` from lib.dom.d.ts instead.\n */\n\n/**\n * @deprecated Not used internally. Use `(event: MediaQueryListEvent) => void` instead.\n */\n\nfunction useMediaQueryOld(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {\n  const [match, setMatch] = React.useState(() => {\n    if (noSsr && matchMedia) {\n      return matchMedia(query).matches;\n    }\n    if (ssrMatchMedia) {\n      return ssrMatchMedia(query).matches;\n    }\n\n    // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n    return defaultMatches;\n  });\n  useEnhancedEffect(() => {\n    let active = true;\n    if (!matchMedia) {\n      return undefined;\n    }\n    const queryList = matchMedia(query);\n    const updateMatch = () => {\n      // Workaround Safari wrong implementation of matchMedia\n      // TODO can we remove it?\n      // https://github.com/mui/material-ui/pull/17315#issuecomment-528286677\n      if (active) {\n        setMatch(queryList.matches);\n      }\n    };\n    updateMatch();\n    // TODO: Use `addEventListener` once support for Safari < 14 is dropped\n    queryList.addListener(updateMatch);\n    return () => {\n      active = false;\n      queryList.removeListener(updateMatch);\n    };\n  }, [query, matchMedia]);\n  return match;\n}\n\n// eslint-disable-next-line no-useless-concat -- Workaround for https://github.com/webpack/webpack/issues/14814\nconst maybeReactUseSyncExternalStore = React['useSyncExternalStore' + ''];\nfunction useMediaQueryNew(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {\n  const getDefaultSnapshot = React.useCallback(() => defaultMatches, [defaultMatches]);\n  const getServerSnapshot = React.useMemo(() => {\n    if (noSsr && matchMedia) {\n      return () => matchMedia(query).matches;\n    }\n    if (ssrMatchMedia !== null) {\n      const {\n        matches\n      } = ssrMatchMedia(query);\n      return () => matches;\n    }\n    return getDefaultSnapshot;\n  }, [getDefaultSnapshot, query, ssrMatchMedia, noSsr, matchMedia]);\n  const [getSnapshot, subscribe] = React.useMemo(() => {\n    if (matchMedia === null) {\n      return [getDefaultSnapshot, () => () => {}];\n    }\n    const mediaQueryList = matchMedia(query);\n    return [() => mediaQueryList.matches, notify => {\n      // TODO: Use `addEventListener` once support for Safari < 14 is dropped\n      mediaQueryList.addListener(notify);\n      return () => {\n        mediaQueryList.removeListener(notify);\n      };\n    }];\n  }, [getDefaultSnapshot, matchMedia, query]);\n  const match = maybeReactUseSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n  return match;\n}\nexport default function useMediaQuery(queryInput, options = {}) {\n  const theme = useTheme();\n  // Wait for jsdom to support the match media feature.\n  // All the browsers MUI support have this built-in.\n  // This defensive check is here for simplicity.\n  // Most of the time, the match media logic isn't central to people tests.\n  const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n  const {\n    defaultMatches = false,\n    matchMedia = supportMatchMedia ? window.matchMedia : null,\n    ssrMatchMedia = null,\n    noSsr = false\n  } = getThemeProps({\n    name: 'MuiUseMediaQuery',\n    props: options,\n    theme\n  });\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof queryInput === 'function' && theme === null) {\n      console.error(['MUI: The `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\n    }\n  }\n  let query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\n  query = query.replace(/^@media( ?)/m, '');\n\n  // TODO: Drop `useMediaQueryOld` and use  `use-sync-external-store` shim in `useMediaQueryNew` once the package is stable\n  const useMediaQueryImplementation = maybeReactUseSyncExternalStore !== undefined ? useMediaQueryNew : useMediaQueryOld;\n  const match = useMediaQueryImplementation(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr);\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useDebugValue({\n      query,\n      match\n    });\n  }\n  return match;\n}","import { lazy, Suspense } from 'react';\n// ! Review React docs regarding ErrorBoundary\n// TODO: Add error boundary\n// import { ErrorBoundary } from \"react-error-boundary\";\nimport { Box, useMediaQuery, useTheme } from '@mui/material';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { GridColDef } from '@mui/x-data-grid';\n\n// Use lazy to defer loading component’s code until it is rendered for the first time.\nconst LineChart = lazy(() => import('../../components/LineChart/LineChart'));\nconst DataGridWithHeader = lazy(\n  () => import('../../components/DataGridWithHeader/DataGridWithHeader'),\n);\n\nimport { useGetNodeViewQuery } from '../../services/api';\n\nimport {\n  CollapsiblePanel,\n  FlexBetween,\n  Header,\n  StatBox,\n} from '../../components';\n\nconst columns: GridColDef[] = [\n  {\n    field: 'nodeName',\n    headerName: 'metadata.system.node_name',\n    headerAlign: 'left',\n    flex: 1,\n    align: 'left',\n  },\n  {\n    field: 'metricValue',\n    headerName: 'Latest Value',\n    headerAlign: 'center',\n    width: 150,\n    //   flex: 1,\n    align: 'right',\n  },\n];\n\nconst NodeView = () => {\n  const theme = useTheme();\n\n  const isNonMediumScreens = useMediaQuery('(min-width: 1200px)');\n  const { data, isLoading } = useGetNodeViewQuery(undefined, {});\n  console.log(data);\n  let podsFormattedData = [];\n  let containersFormattedData = [];\n\n  if (data) {\n    podsFormattedData = data.kube_pod_count_per_node.map((item: any, index: number) => ({\n      id: index,\n      metricName: item.metricName,\n      nodeName: item.labels.node,\n      metricValue: item.metricValue,\n    }));\n\n    containersFormattedData = data.kube_container_count_per_node.map(\n      (item: any, index: number) => ({\n        id: index,\n        nodeName: item.labels.node,\n        metricValue: item.metricValue,\n      }),\n    );\n  }\n\n  return (\n    <Box className=\"NodeView\" height=\"100%\">\n      <Box m=\"1.5rem 2.5rem\">\n        <FlexBetween>\n          <Header title=\"Nodes View\" subtitle=\"View all nodes in the network\" />\n        </FlexBetween>\n\n        <Box\n          mt=\"20px\"\n          display=\"grid\"\n          gridTemplateColumns=\"repeat(1fr)\"\n          gridAutoRows=\"minmax(auto, auto)\"\n          gap=\"20px\"\n          sx={{\n            '& > div': {\n              gridColumn: isNonMediumScreens ? undefined : 'span 12',\n            },\n          }}\n        >\n          {/* ROW 1 */}\n          <Box display=\"grid\" gridTemplateColumns=\"repeat(5, 1fr)\" gap=\"20px\">\n            <StatBox\n              title=\"Total Nodes\"\n              value={data && data.kube_nodes_total.metricValue}\n            />\n            <StatBox\n              title=\"Total Cores\"\n              value={data && data.kube_total_cores.metricValue}\n            />\n            <StatBox\n              title=\"Allocatable Cores\"\n              value={data && data.kube_total_allocatable_cores.metricValue}\n            />\n            <StatBox\n              title=\"Total Memory\"\n              value={data && data.kube_total_memory.metricValue}\n            />\n            <StatBox\n              title=\"Allocatable Memory\"\n              value={data && data.kube_total_allocatable_memory.metricValue}\n            />\n          </Box>\n\n          {/* ROW 2 */}\n          <Box\n            component=\"div\"\n            // gridColumn=\"span 8\"\n            //   bgColor={theme.palette.background.secondary}\n            sx={{ backgroundColor: theme.palette.background.default }}\n            p=\"1rem\"\n            borderRadius=\"0.55rem\"\n          >\n            <CollapsiblePanel title=\"CPU and Memory\">\n              <Suspense fallback={<CircularProgress />}>\n                <LineChart\n                  title={'CPU Usage Per Node - Top 50'}\n                  URL={'clusterUsage'}\n                />\n              </Suspense>\n              <Suspense fallback={<CircularProgress />}>\n                <LineChart\n                  title={'Memory Usage Per Node - Top 50'}\n                  URL={'nodeUsage'}\n                />\n              </Suspense>\n            </CollapsiblePanel>\n          </Box>\n\n          {/* ROW 3 */}\n          <Box\n            component=\"div\"\n            sx={{ backgroundColor: theme.palette.background.default }}\n            p=\"1rem\"\n            borderRadius=\"0.55rem\"\n          >\n            <CollapsiblePanel title=\"Pod and Container Count\">\n              <DataGridWithHeader\n                title={'Pod Count'}\n                columns={columns}\n                data={podsFormattedData}\n                isLoading={isLoading}\n              />\n              <DataGridWithHeader\n                title={'Container Count'}\n                columns={columns}\n                data={containersFormattedData}\n                isLoading={isLoading}\n              />\n            </CollapsiblePanel>\n          </Box>\n\n          {/* ROW 4 */}\n          <Box\n            component=\"div\"\n            // gridColumn=\"span 8\"\n            //   backgroundColor={theme.palette.background.secondary}\n            sx={{ backgroundColor: theme.palette.background.default }}\n            p=\"1rem\"\n            borderRadius=\"0.55rem\"\n          >\n            <CollapsiblePanel title=\"Bandwidth\">\n              <Suspense fallback={<CircularProgress />}>\n                <LineChart\n                  title={'Received Bandwidth Per Node - Top 50'}\n                  URL={'receivedBandwidth'}\n                />\n              </Suspense>\n              <Suspense fallback={<CircularProgress />}>\n                <LineChart\n                  title={'Received Bandwidth Per Node - Top 50'}\n                  URL={'podNetwork'}\n                />\n              </Suspense>\n            </CollapsiblePanel>\n          </Box>\n\n          {/* ROW 5 */}\n          <Box\n            component=\"div\"\n            // gridColumn=\"span 8\"\n            // backgroundColor={theme.palette.background.secondary}\n            sx={{ backgroundColor: theme.palette.background.default }}\n            p=\"1rem\"\n            borderRadius=\"0.55rem\"\n          >\n            <CollapsiblePanel title=\"Rate of Packets\">\n              <Suspense fallback={<CircularProgress />}>\n                <LineChart\n                  title={'Received packet count per node - Top 50'}\n                  URL={'packetsReceived'}\n                />\n              </Suspense>\n              <Suspense fallback={<CircularProgress />}>\n                <LineChart\n                  title={'Transmitted packet count per node - Top 50'}\n                  URL={'packetsTransmitted'}\n                />\n              </Suspense>\n            </CollapsiblePanel>\n          </Box>\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nexport default NodeView;\n"],"names":["lazy","Suspense","Box","useMediaQuery","useTheme","CircularProgress","LineChart","DataGridWithHeader","useGetNodeViewQuery","CollapsiblePanel","FlexBetween","Header","StatBox","jsx","_jsx","jsxs","_jsxs","columns","field","headerName","headerAlign","flex","align","width","NodeView","theme","isNonMediumScreens","_useGetNodeViewQuery","undefined","data","isLoading","console","log","podsFormattedData","containersFormattedData","kube_pod_count_per_node","map","item","index","id","metricName","nodeName","labels","node","metricValue","kube_container_count_per_node","className","height","children","m","title","subtitle","mt","display","gridTemplateColumns","gridAutoRows","gap","sx","gridColumn","value","kube_nodes_total","kube_total_cores","kube_total_allocatable_cores","kube_total_memory","kube_total_allocatable_memory","component","backgroundColor","palette","background","p","borderRadius","fallback","URL"],"sourceRoot":""}